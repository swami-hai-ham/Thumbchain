// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id      Int   @id @default(autoincrement())
  address String   @unique
  tasks   Task[]
  surveys Survey[]
  
}

model Task{
  id          Int       @id @default(autoincrement())
  title       String?   @default("Select the most clickable thumbnail")
  options     Option[]
  user_id     Int
  country     String?
  signature   String
  done        Boolean   @default(false)
  amount      Int
  user        User      @relation(fields: [user_id], references: [id])
  submission  Submission[]
}

model Option{
  id            Int    @id @default(autoincrement())
  image_url     String
  task_id       Int
  task          Task   @relation(fields: [task_id], references: [id])
  submissions   Submission[]
}

model Worker{
  id          Int      @id @default(autoincrement())
  address     String   @unique
  submissions Submission[]
  responses   Response[]
  pending_amt Int      // amount in lamports 10^6
  locked_amt  Int      // amount in lamports 10^6
  payouts Payouts[]
}

model Submission{
  id          Int    @id @default(autoincrement())
  worker_id   Int    
  worker      Worker @relation(fields: [worker_id], references: [id])
  option_id   Int 
  option      Option @relation(fields: [option_id], references: [id])
  task_id     Int
  task        Task   @relation(fields: [task_id], references: [id])
  amount      Int 
  @@unique([worker_id, task_id])
}

model Payouts {
  id            Int     @id @default(autoincrement())
  worker_id     Int
  worker        Worker    @relation(fields: [worker_id], references: [id])
  amount        Int
  signature     String
}

model Survey {
  id          String    @id @default(uuid())
  user_id     Int
  user        User      @relation(fields: [user_id], references: [id])
  title       String
  description String?
  signature   String
  amount      Int
  done        Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  questions   Question[]
  responses   Response[]
}

model Question {
  id          String    @id @default(uuid())
  formId      String
  form        Survey      @relation(fields: [formId], references: [id], onDelete: Cascade)
  type        QuestionType
  orderId     Int
  question    String
  options     String[] 
  description String?
  responses   Response[]
}

model Response {
  id          String    @id @default(uuid())
  worker_id   Int 
  worker      Worker @relation(fields: [worker_id], references: [id])
  questionId  String
  question    Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  formId      String
  survey      Survey    @relation(fields: [formId], references: [id], onDelete: Cascade)
  answer      Json      
  createdAt   DateTime  @default(now())
  @@unique([worker_id, questionId])
}

enum QuestionType {
  MULTIPLE_CHOICE
  CHECKBOXES
  TEXT
  DATE
}

